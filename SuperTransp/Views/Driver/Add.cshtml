@model SuperTransp.Models.DriverViewModel
@{
	Layout = "";
}
<!DOCTYPE HTML>
<html>
<head>
	<title>Agregar Transportista</title>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
	<link rel="stylesheet" href="~/assets/css/main.css" />
	<noscript><link rel="stylesheet" href="~/assets/css/noscript.css" /></noscript>
	@*DataTable************************************************************************@
	<link rel="stylesheet" href="~/datatable/css/bootstrap.css" />
	<link rel="stylesheet" href="~/datatable/css/dataTables.bootstrap4.min.css" />
	<link rel="stylesheet" href="~/datatable/css/responsive.bootstrap4.min.css" />
	@*************************************************************************************@
	<style>
		.is-invalid {
			border: 2px solid red;
			background-color: #ffe6e6;
		}
	</style>
</head>
<body class="is-preload">
	@using (Html.BeginForm("Add", "Driver", FormMethod.Post))
	{
		<!-- Wrapper -->
		<div id="wrapper">

			<!-- Header -->
			<header id="header">
				<div class="inner">

					<!-- Logo -->
					<a href="#" class="logo">
						<span class="symbol"><img src="~/images/logo_login.jpg" alt="" /></span><span class="title">SuperTransp</span>
						<br />
						<span class="title">@ViewBag.EmployeeName</span>
						<br />
						@if (TempData["SuccessMessage"] != null)
						{
							<div id="successMessage" class="alert alert-success">
								@TempData["SuccessMessage"]
							</div>
						}
					</a>
				</div>
				<!-- Nav -->
				<nav>
					<ul>
						<li><a href="#menu">Menu</a></li>
					</ul>
				</nav>
			</header>

			<!-- Menu -->
			<nav id="menu">
				<h2>Menu</h2>
				<ul>
					<li>@Html.ActionLink("Inicio", "Index", "Home")</li>
					<li>@Html.ActionLink("Agregar transportistas a otra línea", "PublicTransportGroupList", "Driver")</li>
					<li>@Html.ActionLink("Salir", "Login", "Security")</li>
				</ul>
			</nav>

			<!-- Main -->
			<div id="main">
				<div class="inner">
					<!-- Form -->
					<section>
						<h1 style="color:#4cbece">Agregar transportista</h1>
						<label>Linea: @Model.PTGCompleteName</label>
						<br />
						<br />
						<br />
						<div class="row gtr-uniform">
							<div class="col-6">
								<strong>Cédula:</strong>
								@Html.HiddenFor(x => x.PTGCompleteName)
								@Html.HiddenFor(x => x.PublicTransportGroupId)
								@Html.TextBoxFor(x => x.DriverIdentityDocument, new { placeholder = "Cédula", tabindex = "0", maxlength = "8" })
								<span asp-validation-for="DriverIdentityDocument" class="text-danger"></span>
							</div>
							<div class="col-6 col-12-xsmall">
								<strong>Nombre:</strong>
								@Html.TextBoxFor(x => x.DriverFullName, new { placeholder = "Nombre del transportista", tabindex = "0", maxlength = "50" })
							</div>
							<div class="col-6">
								<strong>Número de Socio:</strong>
								@Html.TextBoxFor(x => x.PartnerNumber, new { placeholder = "Número de socio", maxlength = "2" })
								<span asp-validation-for="PartnerNumber" class="text-danger"></span>
							</div>
							<div class="col-6">
								<strong>Teléfono:</strong>
								@Html.TextBoxFor(x => x.DriverPhone, new { placeholder = "Teléfono del transportista", maxlength = "11" })
								<span asp-validation-for="DriverPhone" class="text-danger"></span>
							</div>
							<div class="col-12">
								<ul class="actions">
									<li><button type="submit" id="saveRequest" class="primary">Agregar a la línea</button></li>
								</ul>
							</div>
						</div>
					</section>
					<section>
						<br />
						<br />
						<h4 style="color:#4cbece">Transportistas asignados a la línea</h4>
						<br />
						<table id="inventory" class="table table-striped table-bordered dt-responsive nowrap" style="width:100%">
							<thead>
								<tr>
									<th>Nombre</th>
									<th>Cédula</th>
									<th># Socio</th>
									<th># Teléfono</th>
									<th>Modificar</th>
									<th>Eliminar</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var driver in ViewBag.Drivers)
								{
									<tr>

										<td>@driver.DriverFullName</td>
										<td>@driver.DriverIdentityDocument</td>
										<td>@driver.PartnerNumber</td>
										<td>@driver.DriverPhone</td>
										<td id="@driver.PublicTransportGroupId">
											@Html.ActionLink("Modificar", "Edit", "Driver", new { driverPublicTransportGroupId = driver.DriverPublicTransportGroupId }, new { @id = "btnEdit" })
										</td>
										<td id="@driver.DriverPublicTransportGroupId">
											<a href="javascript:void(0);"
											   id="btnDelete"
											   onclick="confirmDeletion('@Url.Action("Delete", "Driver", new { driverId = @driver.DriverId, publicTransportGroupId = @driver.PublicTransportGroupId, pTGCompleteName = @driver.PTGCompleteName })')">
												Eliminar
											</a>
										</td>
									</tr>
								}
							</tbody>
						</table>
					</section>
				</div>
			</div>
		</div>
	}
	<!-- Scripts -->
	<script src="~/assets/js/jquery.min.js"></script>
	<script src="~/assets/js/browser.min.js"></script>
	<script src="~/assets/js/breakpoints.min.js"></script>
	<script src="~/assets/js/util.js"></script>
	<script src="~/assets/js/main.js"></script>

	@*DataTable*******************************************@
	<script src="~/datatable/js/jquery-3.5.1.js"></script>
	<script src="~/datatable/js/jquery.dataTables.min.js"></script>
	<script src="~/datatable/js/dataTables.bootstrap4.js"></script>
	<script src="~/datatable/js/dataTables.responsive.min.js"></script>
	<script src="~/datatable/js/responsive.bootstrap4.min.js"></script>

	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}

	<script type="text/javascript">

		function confirmDeletion(url) {
			const userConfirmed = confirm("¿Está seguro de que desea eliminar este registro?");
			if (userConfirmed) {
				window.location.href = url;
			}
		}

		document.addEventListener("DOMContentLoaded", function () {
			function handleInput(selector, transformFunction) {
				var inputElement = document.querySelector(selector);
				if (inputElement) {
					inputElement.addEventListener("input", function () {
						inputElement.value = transformFunction(inputElement.value);
					});
				}
			}

			handleInput("[name='DriverIdentityDocument']", function (value) {
				return value.replace(/[^0-9]/g, "");
			});

			handleInput("[name='DriverFullName']", function (value) {
				return value.toUpperCase();
			});

			handleInput("[name='PartnerNumber']", function (value) {
				return value.replace(/[^0-9]/g, "");
			});

			handleInput("[name='DriverPhone']", function (value) {
				return value.replace(/[^0-9]/g, "");
			});
		});

		$("body").on("click", "#saveRequest", function (event) {
			event.preventDefault();

			if (!isOkToSave()) {
				return false;
			}

			if (!confirm("¿Está seguro de que desea actualizar los registros?")) {
				return false;
			}

			$(this).closest("form").trigger("submit");
		});

		$("form").on("submit", function (e) {
			e.preventDefault();

			if ($(this).valid()) {
				var paramValue2 = $('#PublicTransportGroupId').val();
				var paramValue4 = $('#PartnerNumber').val();
				var checkExistingUrl = '@Url.Action("CheckExistingValues", "Driver")';
				$.ajax({
					url: checkExistingUrl,
					data: {
						paramValue2: paramValue2,
						paramValue4: paramValue4
					},
					success: function (data) {
						showMsg(data);
					},
					cache: false
				});
			}
		});

		function isOkToSave() {
			let firstInvalidField = null;
			let message = "";

			if ($("#DriverIdentityDocument").val() == "" && !firstInvalidField) {
				firstInvalidField = "#DriverIdentityDocument";
				message = "Debe colocar la cédula del transportista";
			}

			if (!firstInvalidField) {
				const identityValue = $("#DriverIdentityDocument").val();

				if (identityValue == "" || identityValue.length < 7) {
					firstInvalidField = "#DriverIdentityDocument";
					message = "Debe colocar un número de cédula válido";
				}
			}

			if ($("#DriverFullName").val() == "" && !firstInvalidField) {
				firstInvalidField = "#DriverFullName";
				message = "Debe colocar el nombre del transportista";
			} else {
				const driverFullName = $("#DriverFullName").val().trim();
				const parts = driverFullName.split(" ");

				if (parts.length < 2 || parts[0].length < 3 || parts[1].length < 3) {
					if (!firstInvalidField) {
						firstInvalidField = "#DriverFullName";
					}
					message = "Debe colocar nombre y apellido correctamente";
				}
			}


			if ($("#PartnerNumber").val() != "" &&  $("#PartnerNumber").val() == "0" && !firstInvalidField) {
				firstInvalidField = "#PartnerNumber";
				message = "El número de socio no puede ser cero";
			}

			if ($("#PartnerNumber").val() == "" && !firstInvalidField) {
				firstInvalidField = "#PartnerNumber";
				message = "Debe colocar el número de socio";
			}

			if ($("#RepresentativePhone").val() == "" && !firstInvalidField) {
				firstInvalidField = "#RepresentativePhone";
				message = "Debe colocar el número de teléfono del representante";
			}

			if (!firstInvalidField) {
				const identityValue = $("#DriverPhone").val();

				if (identityValue == "" || identityValue.length < 11) {
					firstInvalidField = "#DriverPhone";
					message = "Debe colocar un número de télefono válido";
				}
			}

			if (firstInvalidField) {
				showAlert(message, firstInvalidField);
				return false;
			}

			return true;
		}

		function showAlert(message, selector) {
			alert(message);
			highlightErrorField(selector);
			$(selector).focus();
		}

		function highlightErrorField(selector) {
			$(selector).addClass("is-invalid");
			$(selector).on("input", function () {
				$(this).removeClass("is-invalid");
			});

			$(selector)[0].scrollIntoView({ behavior: "smooth", block: "center" });
		}

		function showMsg(hasCurrentJob) {
			if (hasCurrentJob != "OK") {
				alert(hasCurrentJob);
				return false;
			} else {

				$("form").unbind('submit').submit();
			}
		}

		$(document).ready(function () {
			setTimeout(function(){
				$("#successMessage").fadeOut("slow");
			}, 2500);

			$("#DriverIdentityDocument").on("blur keypress", function (event) {
				if (event.type === "blur" || (event.type === "keypress" && event.which === 13)) {
					event.preventDefault();
					let inputValue = $(this).val();
					llamarControlador(inputValue);
				}
			});

			function llamarControlador(value) {
				var checkExistingUrl = '@Url.Action("GetDriverDataByIdDocument", "Driver")';
				$.ajax({
					url: checkExistingUrl,
					type: 'POST',
					data: { driverIdentityDocument: value },
					success: function (response) {
					if (response && response.driverFullName && response.driverPhone) {
						$("#DriverFullName").val(response.driverFullName);
						$("#DriverPhone").val(response.driverPhone);

						$("#DriverFullName").prop("readonly", true);
						$("#DriverPhone").prop("readonly", true);

						$("#PartnerNumber").focus();
					} else {

						$("#DriverFullName").prop("readonly", false);
						$("#DriverPhone").prop("readonly", false);

						$("#DriverFullName").val("");
						$("#DriverPhone").val("");

						$("#DriverFullName").focus();
					}
				},
				error: function (xhr, status, error) {
					console.error("Error en la petición:", error);

					$("#DriverFullName").prop("readonly", false);
					$("#DriverPhone").prop("readonly", false);

					$("#DriverFullName").val("");
					$("#DriverPhone").val("");

					},
				});
			}

			$('#inventory').DataTable({
				"language": {
					"sProcessing":    "Procesando...",
					"sLengthMenu":    "Mostrar _MENU_ registros",
					"sZeroRecords":   "No se encontraron resultados",
					"sEmptyTable":    "Ningún dato disponible en esta tabla",
					"sInfo":          "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
					"sInfoEmpty":     "Mostrando registros del 0 al 0 de un total de 0 registros",
					"sInfoFiltered":  "(filtrado de un total de _MAX_ registros)",
					"sInfoPostFix":   "",
					"sSearch":        "Buscar:",
					"sUrl":           "",
					"sInfoThousands":  ",",
					"sLoadingRecords": "Cargando...",
					"oPaginate": {
						"sFirst":    "Primero",
						"sLast":    "Último",
						"sNext":    "Siguiente",
						"sPrevious": "Anterior"
					},
					"oAria": {
						"sSortAscending":  ": Activar para ordenar la columna de manera ascendente",
						"sSortDescending": ": Activar para ordenar la columna de manera descendente"
					}
				}
			});
		});
	</script>
</body>
</html>


